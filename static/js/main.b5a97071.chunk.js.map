{"version":3,"sources":["recoil/atoms.js","components/Positions/index.js","components/Fixture/index.js","components/Home/index.js","utils/hooks.js","routes/index.js","components/common/Header/index.js","components/common/ErrorBoundary/index.js","App.js","serviceWorker.js","index.js"],"names":["positions","atom","key","default","Positions","positionsData","useRecoilValue","useState","property","direction","sort","setSort","DataTable","primaryKey","onSort","columns","header","Text","data","standings","table","Fixture","render","home","teams","away","date","Home","useRecoilState","setPositions","localData","localStorage","getItem","url","options","storedData","setData","error","setError","loading","setLoading","useEffect","JSON","parse","a","fetch","res","json","fetchData","useFetch","process","console","log","positionsTable","setItem","stringify","Routes","path","Header","pad","Nav","to","ErrorBoundary","props","state","hasError","errorInfo","this","children","React","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.b5a97071.chunk.js","sourcesContent":["import { atom } from 'recoil';\n\nexport const positions = atom({ key: 'positions', default: null });\n","import React, { useState } from 'react';\nimport { DataTable, Text } from 'grommet';\nimport { useRecoilValue } from 'recoil';\nimport { positions } from '../../recoil/atoms';\n\nconst Positions = () => {\n  const positionsData = useRecoilValue(positions);\n  const [sort, setSort] = useState({\n    property: \"points\",\n    direction: \"desc\"\n  });\n  return !positionsData ? <div>Loading...</div> : (\n  <DataTable\n    primaryKey='index'\n    sort={sort}\n    onSort={setSort}\n    columns={[\n      {\n        property: 'position',\n        header: <Text>Position</Text>\n      },\n      {\n        property: 'team.name',\n        header: <Text>Team</Text>,\n      },\n      {\n        property: 'playedGames',\n        header: <Text>G</Text>,\n      },\n      {\n        property: 'won',\n        header: <Text>W</Text>,\n      },\n      {\n        property: 'draw',\n        header: <Text>D</Text>,\n      },\n      {\n        property: 'lost',\n        header: <Text>L</Text>,\n      },\n      {\n        property: 'goalDifference',\n        header: <Text>GD</Text>,\n      },\n      {\n        property: 'points',\n        header: <Text>P</Text>,\n      },\n    ]}\n    data={positionsData.standings[0].table}\n  />\n  )\n};\n\nexport default Positions;","import React from 'react';\nimport { DataTable, Text } from 'grommet';\nimport data from '../../datasources/fixtures.json';\nimport teams from '../../datasources/teams.json';\n\nconst Fixture = () => \n  <DataTable\n    primaryKey='index'\n    columns={[\n      {\n        property: 'home',\n        header: <Text>Home</Text>,\n        render: ({ home }) => teams[home]\n      },\n      {\n        property: 'away',\n        header: <Text>Away</Text>,\n        render: ({ away }) => teams[away]\n      },\n      {\n        property: 'date',\n        header: <Text>Date</Text>,\n        render: ({ date }) => (\n          <Text>{date}</Text>\n        ),\n      },\n    ]}\n    data={data}\n  />\n\nexport default Fixture;","import React, { useEffect } from 'react';\nimport { useFetch } from '../../utils/hooks';\nimport { useRecoilState } from 'recoil';\nimport { positions } from '../../recoil/atoms';\n\nconst Home = () => {\n  const [pos, setPositions] = useRecoilState(positions);\n  const localData = localStorage.getItem('lcDataTable');\n  const { loading, data, error } = useFetch(\n    `${process.env.REACT_APP_API_FOOTBALL_URL}/standings`,\n    {\n      'headers': {\n        'x-auth-token': process.env.REACT_APP_API_FOOTBALL_TOKEN\n      }\n    },\n    localData\n  );\n  error && console.log('error:', error);\n  useEffect(() => {\n    if (!loading && data) {\n      const positionsTable = data;\n      !localData && localStorage.setItem('lcDataTable', JSON.stringify(positionsTable));\n      setPositions(positionsTable);\n    }\n  }, [data, loading, localData, setPositions]);\n  return <div>Home</div>\n}\n\nexport default Home;","import { useState, useEffect } from 'react';\n\nexport const useFetch = (url, options, storedData) => {\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  \n  useEffect(() => {\n    if (storedData) {\n      setData(JSON.parse(storedData));\n      setLoading(false);\n      setError(false);\n    } else {\n      const fetchData = async () => {\n        setLoading(true);\n        try {\n          const res = await fetch(url, {\"method\": \"GET\", ...options});\n          const json = await res.json();\n          setData(json);\n          setLoading(false)\n        } catch (error) {\n          setError(error);\n        }\n      };\n      fetchData();\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return { data, error, loading };\n};","import React from 'react';\nimport {\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport Positions from '../components/Positions';\nimport Fixture from '../components/Fixture';\nimport Home from '../components/Home';\n\nconst Routes = () => \n  <Switch>\n    <Route path={`${process.env.PUBLIC_URL}/home`}>\n      <Home />\n    </Route>\n    <Route path={`${process.env.PUBLIC_URL}/positions`}>\n      <Positions />\n    </Route>\n    <Route path={`${process.env.PUBLIC_URL}/fixture`}>\n      <Fixture />\n    </Route>\n  </Switch>\n\nexport default Routes;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Header as BaseHeader, Nav } from 'grommet';\n\nconst Header = () => <BaseHeader pad=\"medium\">\n  <Nav direction=\"row\" >\n    <Link to=\"/home\">Home</Link>\n    <Link to=\"/positions\">Positions</Link>\n    <Link to=\"/fixture\">Fixture</Link>\n  </Nav>\n</BaseHeader>\n\nexport default Header;","import React from 'react';\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error) {\n    // Update state so the next render will show the fallback UI.   \n    return { hasError: true };  \n  }\n  componentDidCatch(error, errorInfo) {\n    console.log(error);\n  }\n  render() {\n    if (this.state.hasError) {\n      return <h1>Oops!</h1>;\n    }\n    return this.props.children; \n  }\n};\n\nexport default ErrorBoundary;","import React from 'react';\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { RecoilRoot } from 'recoil';\nimport './App.css';\nimport Routes from './routes';\nimport Header from './components/common/Header';\nimport ErrorBoundary from './components/common/ErrorBoundary';\n\n\n\nfunction App() {\n  console.log('process.env.PUBLIC_URL', process.env.PUBLIC_URL);\n\n  return (\n    <ErrorBoundary>\n      <div className=\"App\">\n        <RecoilRoot>\n          <Router>\n            <Header />\n            <Routes />\n          </Router>\n        </RecoilRoot>\n      </div>\n    </ErrorBoundary>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}