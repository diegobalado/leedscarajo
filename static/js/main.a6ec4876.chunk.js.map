{"version":3,"sources":["components/common/Loader/index.js","components/Positions/index.js","utils/hooks.js","components/Fixture/index.js","routes/index.js","components/common/Header/index.js","App.js","serviceWorker.js","index.js"],"names":["Loader","useState","value","setValue","timer","useRef","clearTimeout","current","setTimeout","useEffect","Grommet","theme","grommet","Box","align","pad","Meter","type","background","values","color","Positions","property","direction","sort","setSort","url","options","data","setData","error","setError","loading","setLoading","a","fetch","res","json","fetchData","useFetch","process","console","log","DataTable","primaryKey","onSort","columns","header","Text","standings","table","Fixture","render","home","teams","away","date","Routes","path","exact","Header","Nav","Anchor","as","Link","to","label","App","className","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.a6ec4876.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\n\nimport { Grommet, Box, Meter } from \"grommet\";\nimport { grommet } from \"grommet/themes\";\n\nconst Loader = () => {\n  const [value, setValue] = useState(20);\n\n  const timer = useRef();\n  clearTimeout(timer.current);\n  timer.current = setTimeout(() => {\n    setValue(value < 100 ? value + 8 : 20);\n  }, 100);\n\n  useEffect(() => {\n    return () => {\n      clearTimeout(timer.current);\n    };\n  }, []);\n\n  return (\n    <Grommet theme={grommet}>\n      <Box align=\"center\" pad=\"small\">\n        <Meter\n          type=\"circle\"\n          background=\"light-2\"\n          values={[{ value, color: value > 50 ? \"accent-2\" : \"accent-1\" }]}\n        />\n      </Box>\n    </Grommet>\n  );\n};\n\nexport default Loader;","import React, { useState } from 'react';\nimport { DataTable, Text } from 'grommet';\nimport { useFetch } from '../../utils/hooks';\nimport Loader from '../common/Loader';\n\nconst Positions = () => {\n  const [sort, setSort] = useState({\n    property: \"points\",\n    direction: \"desc\"\n  });\n  const { loading, data, error } = useFetch(\n    `${process.env.REACT_APP_API_FOOTBALL_URL}/standings`, {\n      'headers': {\n        'x-auth-token': process.env.REACT_APP_API_FOOTBALL_TOKEN\n      }\n    });\n  error && console.log('error:', error);\n  return loading || !data ? <Loader /> : (\n  <DataTable\n    primaryKey='index'\n    sort={sort}\n    onSort={setSort}\n    columns={[\n      {\n        property: 'position',\n        header: <Text>Position</Text>\n      },\n      {\n        property: 'team.name',\n        header: <Text>Team</Text>,\n      },\n      {\n        property: 'playedGames',\n        header: <Text>G</Text>,\n      },\n      {\n        property: 'won',\n        header: <Text>W</Text>,\n      },\n      {\n        property: 'draw',\n        header: <Text>D</Text>,\n      },\n      {\n        property: 'lost',\n        header: <Text>L</Text>,\n      },\n      {\n        property: 'goalDifference',\n        header: <Text>GD</Text>,\n      },\n      {\n        property: 'points',\n        header: <Text>P</Text>,\n      },\n    ]}\n    data={data.standings[0].table}\n  />\n  )\n};\n\nexport default Positions;","import { useState, useEffect } from 'react';\n\nexport const useFetch = (url, options) => {\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  \n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      try {\n        const res = await fetch(url, {\"method\": \"GET\", ...options});\n        const json = await res.json();\n        setData(json);\n        setLoading(false)\n      } catch (error) {\n        setError(error);\n      }\n    };\n    fetchData();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return { data, error, loading };\n};","import React from 'react';\nimport { DataTable, Text } from 'grommet';\nimport moment from 'moment';\nimport data from '../../datasources/fixtures.json';\nimport teams from '../../datasources/teams.json';\n\nconst parseData = ({ date }) => moment(date, moment.ISO_8601).format('D MMMM, dddd');\n\nconst Fixture = () => \n  <DataTable\n    primaryKey='index'\n    columns={[\n      {\n        property: 'home',\n        header: <Text>Home</Text>,\n        render: ({ home }) => teams[home]\n      },\n      {\n        property: 'away',\n        header: <Text>Away</Text>,\n        render: ({ away }) => teams[away]\n      },\n      {\n        property: 'date',\n        header: <Text>Date</Text>,\n        render: ({ date }) => (\n          <Text>{date}</Text>\n        ),\n      },\n    ]}\n    data={data}\n  />\n\nexport default Fixture;","import React from 'react';\nimport {\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport Positions from '../components/Positions';\nimport Fixture from '../components/Fixture';\n\nconst Routes = () => \n  <Switch>\n    <Route path=\"/\" exact={true}>\n      <Positions />\n    </Route>\n    <Route path=\"/fixture\">\n      <Fixture />\n    </Route>\n  </Switch>\n\nexport default Routes;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Header as BaseHeader, Nav, Anchor } from 'grommet';\n\nconst Header = () => <BaseHeader pad=\"medium\">\n  <Nav direction=\"row\" >\n    <Anchor as={Link} to=\"/\" label=\"Positions\" />\n    <Anchor as={Link} to=\"/fixture\" label=\"Fixture\" />\n  </Nav>\n</BaseHeader>\n\nexport default Header;","import React from 'react';\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport './App.css';\nimport Routes from './routes';\nimport Header from './components/common/Header';\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Header />\n        <Routes />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}