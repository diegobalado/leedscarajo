{"version":3,"sources":["logo.svg","components/Table/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Table","useState","property","direction","sort","setSort","leagueData","setLeagueData","useEffect","data","teamA","teamB","points","map","teamData","index","DataTable","onSort","columns","header","Text","primary","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4kFAAAA,EAAOC,QAAU,IAA0B,kC,4JCgE5BC,EAvDD,WAAO,IAAD,EACMC,mBAAS,CAC/BC,SAAU,SACVC,UAAW,SAHK,mBACXC,EADW,KACLC,EADK,OAKkBJ,mBAAS,IAL3B,mBAKXK,EALW,KAKCC,EALD,KAWlB,OAJAC,qBAAU,WAZM,IAAAC,EAadF,IAbcE,EAaUA,GAZrBL,MAAK,SAACM,EAAOC,GAAR,OAAkBD,EAAME,OAASD,EAAMC,UAC1CH,EAAKI,KAAI,SAACC,EAAUC,GAAX,mBAAC,eAA0BD,GAA3B,IAAqC,SAAYC,EAAQ,WAYtE,IAGH,kBAACC,EAAA,EAAD,CACEZ,KAAMA,EACNa,OAAQZ,EACRa,QAAS,CACP,CACEhB,SAAU,WACViB,OAAQ,kBAACC,EAAA,EAAD,kBAEV,CACElB,SAAU,OACViB,OAAQ,kBAACC,EAAA,EAAD,aACRC,SAAS,GAEX,CACEnB,SAAU,QACViB,OAAQ,kBAACC,EAAA,EAAD,WAEV,CACElB,SAAU,OACViB,OAAQ,kBAACC,EAAA,EAAD,WAEV,CACElB,SAAU,QACViB,OAAQ,kBAACC,EAAA,EAAD,WAEV,CACElB,SAAU,QACViB,OAAQ,kBAACC,EAAA,EAAD,WAEV,CACElB,SAAU,YACViB,OAAQ,kBAACC,EAAA,EAAD,YAEV,CACElB,SAAU,SACViB,OAAQ,kBAACC,EAAA,EAAD,YAGZX,KAAMH,KC/BKgB,MAtBf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8c257bda.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useEffect } from 'react';\nimport { DataTable, Text } from 'grommet';\nimport data from '../../datasources/points.json';\n\nconst parseData = data => {\n  data.sort((teamA, teamB) => teamA.points < teamB.points);\n  return data.map((teamData, index) => ({ ...teamData, 'position': index + 1}));\n};\n\nconst Table = () => {\n  const [sort, setSort] = useState({\n    property: \"points\",\n    direction: \"desc\"\n  });\n  const [leagueData, setLeagueData] = useState([]);\n\n  useEffect(() => {\n    setLeagueData(parseData(data));\n  }, []);\n\n  return (\n  <DataTable\n    sort={sort}\n    onSort={setSort}\n    columns={[\n      {\n        property: 'position',\n        header: <Text>Position</Text>\n      },\n      {\n        property: 'name',\n        header: <Text>Team</Text>,\n        primary: true,\n      },\n      {\n        property: 'games',\n        header: <Text>G</Text>,\n      },\n      {\n        property: 'wins',\n        header: <Text>W</Text>,\n      },\n      {\n        property: 'draws',\n        header: <Text>D</Text>,\n      },\n      {\n        property: 'loses',\n        header: <Text>L</Text>,\n      },\n      {\n        property: 'goal_diff',\n        header: <Text>GD</Text>,\n      },\n      {\n        property: 'points',\n        header: <Text>P</Text>,\n      },\n    ]}\n    data={leagueData}\n  />\n  )\n};\n\nexport default Table;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Table from './components/Table';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Table />\n      {/* <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}